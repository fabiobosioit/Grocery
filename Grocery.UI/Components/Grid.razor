@typeparam IdType
@typeparam TGrid where TGrid :BaseListItem<IdType>

<PageTitle>Weather forecast</PageTitle>

<h1>List Items</h1>

<p>This component demonstrates fetching data from the server.</p>

<button class="btn btn-primary" @onclick="OnCreate">Create Item</button>

<input type="text" class="form-control" 
    @bind-value="_pageparameters.FilterText" 
    @onkeyup="@(async (e) => {if (e.Key=="Enter") await OnPageRequest.InvokeAsync(_pageparameters);})"
    />

@if (Page?.Items?.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var property in properties)
                {
                    var display = property.GetCustomAttribute<DisplayAttribute>();
                    <th @onclick="() => RequireColumnSort(property.Name)">

                        <i class="oi
                    @(Page.OrderBy == property.Name
                        ?(Page.OrderByDirection == SortDirection.Ascending
                                                ? "oi-sort-ascending"
                                                : "oi-sort-descending")
                        :null)"></i>

                        @(display ==null ? property.Name : display.Name)
                    </th>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Page.Items)
            {
                <tr>
                    @foreach (var property in properties)
                    {
                        var value = property.GetValue(item);
                        var displayFormat = property.GetCustomAttribute<DisplayFormatAttribute>();

                        <td>@(displayFormat?.DataFormatString ==null ? value : string.Format(displayFormat.DataFormatString,value))</td>
                    }
                    <td>
                        <button class="btn btn-warning"
                        @onclick="@(() => OnEdit.InvokeAsync(item))">
                            Edit
                        </button>
                        <button class="btn btn-error"
                        @onclick="@(() => OnDelete.InvokeAsync(item))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item @(Page.CurrentPage==1?"disabled":null)" @onclick="() => RequestPage(1)">
                <a class="page-link">First</a>
            </li>
            <li class="page-item @(Page.CurrentPage==1?"disabled":null)" @onclick="() => RequestPage(Page.CurrentPage - 1)">
                <a class="page-link">Previous</a>
            </li>

            @for (var page = 1; page <= Page.PageCount; page++)
            {
                var currentPage = page;
                <li class="page-item @(Page.CurrentPage==currentPage?"active":null)" 
                    @onclick="() => RequestPage(currentPage)">
                    <a class="page-link">@currentPage</a>
                </li>
            }
            <li class="page-item @(Page.CurrentPage==Page.PageCount?"disabled":null)" @onclick="() => RequestPage(Page.CurrentPage + 1)">
                <a class="page-link">Next</a>
            </li> 
            <li class="page-item @(Page.CurrentPage==Page.PageCount?"disabled":null)" @onclick="() => RequestPage(Page.PageCount)">
                <a class="page-link">Last</a>
            </li>
        </ul>
    </nav>
}
else
{
    <span>No data to read</span>
}

@code {
    private PropertyInfo[] properties = typeof(TGrid).GetProperties()
                                                    .Where(x => x.GetCustomAttribute<HiddenAttribute>() == null)
                                                    .ToArray();

    private PageParameters _pageparameters = new PageParameters();

    [Parameter]
    public Page<TGrid, IdType>? Page { get; set; }

    [Parameter]
    public EventCallback<TGrid> OnEdit { get; set; }

    [Parameter]
    public EventCallback OnCreate { get; set; }

    [Parameter]
    public EventCallback<TGrid> OnDelete { get; set; }

    [Parameter]
    public EventCallback<PageParameters> OnPageRequest { get; set; }

    public async Task RequireColumnSort(string columnname)
    {
        if (_pageparameters.OrderBy != columnname)
        {
            _pageparameters.OrderBy = columnname;
            _pageparameters.OrderByDirection = SortDirection.Ascending;
        }
        else
        {
            _pageparameters.OrderByDirection =
            _pageparameters.OrderByDirection == SortDirection.Ascending
                    ? SortDirection.Descending : SortDirection.Ascending;

        }
        await OnPageRequest.InvokeAsync(_pageparameters);
    }

    public async Task RequestPage(int requestedpage)
    {
        _pageparameters.Page = requestedpage;
        await OnPageRequest.InvokeAsync(_pageparameters);

    }
}